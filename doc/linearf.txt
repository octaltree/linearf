*linearf.txt*	Fast and extensible fuzzy finder

Author: octaltree <octaltree at users.noreply.github.com>

CONTENTS	*linearf-contents*

Installation	|linearf-install|
Usage	|linearf-usage|
Example	|linearf-example|
API Reference	|linearf-reference|
Motivation	|linearf-motivation|

==============================================================================
INSTALLATION	*linearf-install*

First, install the plugins and sources locally. If you use dein as your package
manager, it will look like this.
>
  call dein#add('octaltree/linearf')
  call dein#add('octaltree/linearf-my-flavors')
<
Then build your own fuzzy finder.
>
  lua require('linearf').recipe.sources = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').recipe.matchers = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').recipe.converters = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').build()
<
One building is required per recipe change.

==============================================================================
USAGE	*linearf-usage*

After the build is complete, initialize it with the UI module.
>
  lua require('linearf').init(require('linearf-vanilla').new())
<
After initialize, you can use the global variable `linearf` and `lnf`.
>
  lua lnf('', {})
<
You can set up frequently used scenarios in advance.
>
  lua require('linearf').scenarios = {
      \     simple = {
      \         linearf = {
      \             source = 'simple',
      \             matcher = 'substring'
      \         }
      \     },
      \     osstr = {
      \         linearf = {
      \             source = 'osstr',
      \             matcher = 'substring'
      \         }
      \     }
      \ }
  lua linearf.run('simple')
  lua linearf.run('simple', {})
<
==============================================================================
EXAMPLE	*linearf-example*
>
  --lua<<EOF
  -- If you paste in vimrc, surround with EOF

  local linearf = require('linearf')
  local flavors = require('linearf-my-flavors')

  -- Initialize with a view module
  linearf.init(require('linearf-vanilla').new())

  -- Specify the sources to include in the build
  linearf.recipe.sources = {
      {name = "identity", path = "flavors_plain::Identity"},
      {name = "command", path = "flavors_tokio::Command"}
  }
  linearf.recipe.converters = {
      {name = "format_line", path = "flavors_plain::FormatLine"}
  }
  linearf.recipe.matchers = {
      {name = "identity", path = "flavors_plain::Identity"},
      {name = "substring", path = "flavors_plain::Substring"},
      {name = "clap", path = "flavors_clap::Clap"}
  }
  -- Auto-build if you want
  linearf.bridge.try_build_if_not_exist = true
  linearf.bridge.try_build_on_error = true

  -- Define your scenario. flavors provides you with several presets
  local function set(target, context_manager, scenario)
      linearf.context_managers[target] = context_manager
      linearf.scenarios[target] = scenario
  end
  set('line', flavors.context_managers['line'], flavors.merge {
      flavors.scenarios['line'],
      flavors.scenarios.quit,
      flavors.scenarios.no_list_insert,
      flavors.scenarios.no_querier_normal,
      {
          linearf = {
              list_nnoremap = {
                  ["<CR>"] = flavors.hide_and(flavors.actions.line.jump)
              },
              querier_inoremap = {
                  ["<CR>"] = flavors.normal_and(
                      flavors.hide_and(flavors.actions.line.jump))
              }
          },
          view = {querier_on_start = 'insert'}
      }
  })
  local use_rg = false
  set('file', flavors.context_managers[use_rg and 'file_rg' or 'file_find'],
      flavors.merge {
      flavors.scenarios[use_rg and 'file_rg' or 'file_find'],
      flavors.scenarios.quit,
      flavors.scenarios.no_list_insert,
      flavors.scenarios.no_querier_normal,
      {
          linearf = {
              list_nnoremap = {
                  ["<CR>"] = flavors.hide_and(flavors.actions.file.open),
                  ["<nowait>s"] = flavors.hide_and(flavors.actions.file.split),
                  ["t"] = flavors.hide_and(flavors.actions.file.tabopen),
                  ["v"] = flavors.hide_and(flavors.actions.file.vsplit)
              },
              querier_inoremap = {
                  ["<CR>"] = flavors.normal_and(
                      flavors.hide_and(flavors.actions.file.open))
              }
          }
      }
  })
  set('grep', flavors.context_managers[use_rg and 'grep_rg' or 'grep_grep'],
      flavors.merge {
      flavors.scenarios[use_rg and 'grep_rg' or 'grep_grep'],
      flavors.scenarios.quit,
      flavors.scenarios.no_list_insert,
      flavors.scenarios.enter_list,
      {
          linearf = {
              list_nnoremap = {
                  ["<CR>"] = flavors.hide_and(flavors.actions.grep.open),
                  ["<nowait>s"] = flavors.hide_and(flavors.actions.grep.split),
                  ["t"] = flavors.hide_and(flavors.actions.grep.tabopen),
                  ["v"] = flavors.hide_and(flavors.actions.grep.vsplit)
              },
              querier_inoremap = {},
              querier_nnoremap = {
                  ["<nowait><ESC>"] = flavors.actions.view.goto_list
              }
          }
      }
  })

  -- optional
  linearf.utils.command(
      "nnoremap <silent><space>/ :<c-u>lua linearf.run('line')<CR>")
  linearf.utils.command(
      "nnoremap <silent><space>f :<c-u>lua linearf.run('file')<CR>")
  linearf.utils.command(
      "nnoremap <silent><space>g :<c-u>lua linearf.run('grep')<CR>")


  -- for vimrc
  --EOF
<
==============================================================================
API REFERENCE	*linearf-reference*

------------------------------------------------------------------------------
*linearf*

the root module. it can call as
({scenario_name:string}) -> ()
({scenario_diff:table}) -> ()
({scenario_name:string}, {scenario_diff:table}) -> ()

*linearf.recipe*  >
		  pub struct Recipe {
		      #[serde(default)]
		      pub crates: Vec<Crate>,
		      #[serde(default)]
		      pub sources: Vec<SourceDescriptor>,
		      #[serde(default)]
		      pub matchers: Vec<MatcherDescriptor>,
		      #[serde(default)]
		      pub converters: Vec<ConverterDescriptor>
		  }
< >
		  pub struct Crate {
		      pub name: String,
		      pub dir: PathBuf
		  }
< >
		  pub struct SourceDescriptor {
		      pub name: String,
		      pub path: String
		  }
< >
		  pub struct MatcherDescriptor {
		      pub name: String,
		      pub path: String
		  }
< >
		  pub struct ConverterDescriptor {
		      pub name: String,
		      pub path: String
		  }
<

*linearf.scenarios* {{scenario_name:string} = {scenario_diff}}
		A table that has name and scenario diff. The default scenario is >
		  local DEFAULT = {
		      linearf = {
		          query = '',
		          converters = {},
		          cache_sec = 60,
		          cache_across_sessions = true,
		          first_view = 255,
		          chunk_size = 32767,
		          dispose_flow = false,
		          list_nnoremap = {},
		          querier_nnoremap = {},
		          querier_inoremap = {}
		      },
		      source = {},
		      matcher = {},
		      view = {}
		  }
<		The schema of linearf is >
		  pub struct Vars {
		      pub source: SmartString,
		      pub matcher: SmartString,
		      pub converters: Vec<SmartString>,
		      pub query: String,
		      /// How many seconds before you can reuse it
		      pub cache_sec: u32,
		      /// Whether to reuse flows from different sessions
		      pub cache_across_sessions: bool,
		      pub first_view: usize,
		      pub chunk_size: usize,
		      pub dispose_flow: bool
		  }
<		list_nnoremap is {{key:string} = {action:function}}
		view is, e.g., |linearf_vanilla.DEFAULT|

*linearf-action* ({items}, {view_id}) -> {is_view_action:boolean}

*linearf-item*  >
		  pub struct Item {
		      /// id must not be 0
		      pub id: u32,
		      pub value: MaybeUtf8,
		      // json value cannot represent luastring
		      pub info: Option<Map<String, Value>>,
		      pub view: Option<String>,
		      pub view_for_matcing: Option<String>
		  }
<

*linearf.context_managers* {{scenario_name:string} = () -> {scenario_diff:table}}
		Table with scenario names and functions that return scenario diff

*linearf.view*
		An object with the same interface as vanilla

*linearf.build* () -> ()
		Builds dynamic library based on |linearf.recipe|

*linearf.init* ({view}) -> ()
		1. Set global variable `linearf` and `lnf`
		2. Set |linearf.view|

*linearf.run* ({scenario_name:string}, {scenario_diff:table}) -> ()

*linearf.query* ({session_id:number}, {query:string}) -> ()

------------------------------------------------------------------------------
*linearf.bridge*

*linearf.bridge.try_build_if_not_exist* boolean >
		      try_build_if_not_exist = false,
<		Trying to build dynamic library when it is not loaded on run, if true

*linearf.bridge.try_build_on_error* boolean >
		      try_build_on_error = false,
<		Trying to build dynamic library when you get the recipe based error such as source not found on error, if true

------------------------------------------------------------------------------
*linearf-vanilla*

*linearf_vanilla.new* () -> {vanilla}

*linearf_vanilla.DEFAULT*  >
		      Vanilla.DEFAULT = {
		          cursorline = true,
		          querier_on_start = 'inactive', -- 'inactive'|'active'|'insert'

		          refresh_interval = 15,
		          view_size = 1000,
		          chunk_size = 6000
		      }
<

*linearf_vanilla.execute*  ({self}, {action}, {view_id}) -> ()

==============================================================================
MOTIVATION	*linearf-motivation*

There are many fuzzy finders in vim: CtrlP, LeaderF, denite, telescope, clap,
fzf, skim, fzf-preview, candle, etc. However, there were nothing that that had
the feel of vim and the speed of native fzf, so I decided to make one.

I want to write in another language because vim script is slow, but I have to
consider the cost of moving data to vim. After considering rpc, dynamic
libraries, and wasm for speed and vim compability, I chose to load dynamic
libraries written by rust via lua.
