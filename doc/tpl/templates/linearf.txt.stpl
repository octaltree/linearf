*linearf.txt*	Fast and extensible fuzzy finder

Author: octaltree <octaltree at users.noreply.github.com>

CONTENTS	*linearf-contents*

Installation	|linearf-install|
Usage	|linearf-usage|
Example	|linearf-example|
API Reference	|linearf-reference|
Motivation	|linearf-motivation|

==============================================================================
INSTALLATION	*linearf-install*

First, install the plugins and sources locally. If you use dein as your package
manager, it will look like this.
>
  call dein#add('octaltree/linearf')
  call dein#add('octaltree/linearf-my-flavors')
<
Then build your own fuzzy finder.
>
  lua require('linearf').recipe.sources = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').recipe.matchers = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').recipe.converters = {{name = "identity", path = "flavors_plain::Identity"}}
  lua require('linearf').build()
<
One building is required per recipe change.

==============================================================================
USAGE	*linearf-usage*

After the build is complete, initialize it with the UI module.
>
  lua require('linearf').init(require('linearf-vanilla').new())
<
After initialize, you can use the global variable `linearf` and `lnf`.
>
  lua lnf('', {})
<
You can set up frequently used scenarios in advance.
>
  lua require('linearf').scenarios = {
      \     simple = {
      \         linearf = {
      \             source = 'simple',
      \             matcher = 'substring'
      \         }
      \     },
      \     osstr = {
      \         linearf = {
      \             source = 'osstr',
      \             matcher = 'substring'
      \         }
      \     }
      \ }
  lua linearf.run('simple')
  lua linearf.run('simple', {})
<
==============================================================================
EXAMPLE	*linearf-example*
<%= load_block(LINEARF_ROOT.join("README.md"), "--lua<<EOF", "--EOF", 0) %>
==============================================================================
API REFERENCE	*linearf-reference*

------------------------------------------------------------------------------
*linearf*

the root module. it can call as
({scenario_name:string}) -> ()
({scenario_diff:table}) -> ()
({scenario_name:string}, {scenario_diff:table}) -> ()

*linearf.recipe*  <%= load_block(LINEARF_ROOT.join("model/bundle/src/lib.rs"), "pub struct Recipe {", "}", 1)
  %> <%= load_block(LINEARF_ROOT.join("model/bundle/src/lib.rs"), "pub struct Crate {", "}", 1)
  %> <%= load_block(LINEARF_ROOT.join("model/bundle/src/lib.rs"), "pub struct SourceDescriptor {", "}", 1)
  %> <%= load_block(LINEARF_ROOT.join("model/bundle/src/lib.rs"), "pub struct MatcherDescriptor {", "}", 1)
  %> <%= load_block(LINEARF_ROOT.join("model/bundle/src/lib.rs"), "pub struct ConverterDescriptor {", "}", 1)
  %>

*linearf.scenarios* {{scenario_name:string} = {scenario_diff}}
		A table that has name and scenario diff. The default scenario is <%=
  load_block(LINEARF_ROOT.join("lua/linearf/scenario_builder.lua"), "local DEFAULT = {", "}", 1)
  %>		The schema of linearf is <%= load_block(LINEARF_ROOT.join("model/core/src/lib.rs"), "pub struct Vars {", "}", 1)
  %>		list_nnoremap is {{key:string} = {action:function}}
		view is, e.g., |linearf_vanilla.DEFAULT|

*linearf-action* ({items}, {view_id}) -> {is_view_action:boolean}

*linearf-item*  <%= load_block(LINEARF_ROOT.join("model/core/src/item.rs"), "pub struct Item {", "}", 1) %>

*linearf.context_managers* {{scenario_name:string} = () -> {scenario_diff:table}}
		Table with scenario names and functions that return scenario diff

*linearf.view*
		An object with the same interface as vanilla

*linearf.build* () -> ()
		Builds dynamic library based on |linearf.recipe|

*linearf.init* ({view}) -> ()
		1. Set global variable `linearf` and `lnf`
		2. Set |linearf.view|

*linearf.run* ({scenario_name:string}, {scenario_diff:table}) -> ()

*linearf.query* ({session_id:number}, {query:string}) -> ()

*linearf.resume* ({session_id:number}) -> ()

*linearf.resume_last () -> ()

------------------------------------------------------------------------------
*linearf.bridge*

*linearf.bridge.try_build_if_not_exist* boolean <%=
  load_block(LINEARF_ROOT.join("lua/linearf/bridge.lua"), "    try_build_if_not_exist = false,", "    try_build_if_not_exist = false,", 1)
  %>		Trying to build dynamic library when it is not loaded on run, if true

*linearf.bridge.try_build_on_error* boolean <%=
  load_block(LINEARF_ROOT.join("lua/linearf/bridge.lua"), "    try_build_on_error = false,", "    try_build_on_error = false,", 1)
  %>		Trying to build dynamic library when you get the recipe based error such as source not found on error, if true

------------------------------------------------------------------------------
*linearf-vanilla*

*linearf_vanilla.new* () -> {vanilla}

*linearf_vanilla.DEFAULT*  <%=
  load_block(LINEARF_ROOT.join("lua/linearf-vanilla/init.lua"), "    Vanilla.DEFAULT = {", "    }", 1) %>

*linearf_vanilla.execute*  ({self}, {action}, {view_id}) -> ()

==============================================================================
MOTIVATION	*linearf-motivation*

There are many fuzzy finders in vim: CtrlP, LeaderF, denite, telescope, clap,
fzf, skim, fzf-preview, candle, etc. However, there were nothing that that had
the feel of vim and the speed of native fzf, so I decided to make one.

I want to write in another language because vim script is slow, but I have to
consider the cost of moving data to vim. After considering rpc, dynamic
libraries, and wasm for speed and vim compability, I chose to load dynamic
libraries written by rust via lua.
